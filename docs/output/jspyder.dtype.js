Ext.data.JsonP.jspyder_dtype({"tagname":"class","name":"jspyder.dtype","autodetected":{},"files":[{"filename":"js-dtype.js","href":"js-dtype.html#jspyder-dtype"}],"owner":"jspyder","params":[{"tagname":"params","type":"Object","name":"obj","doc":"<p>The object against which all of the other operations will be run\n     against.</p>\n","html_type":"Object"},{"tagname":"params","type":"Function","name":"fn","optional":true,"doc":"<p>A callback function, which will be executed using the current\n     <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a> object as the context, and the object [obj] as its\n     first parameter.</p>\n\n<hr />\n","html_type":"Function"}],"members":[{"name":"_typeError","tagname":"method","owner":"jspyder.dtype","id":"method-_typeError","meta":{"private":true}},{"name":"js_dtype[\"string\"]","tagname":"method","owner":"jspyder.dtype","id":"method-js_dtype[\"string\"]","meta":{"chainable":true}},{"name":"jsstring","tagname":"method","owner":"jspyder.dtype","id":"method-jsstring","meta":{"chainable":true}},{"name":"ubyte","tagname":"method","owner":"jspyder.dtype","id":"method-ubyte","meta":{"chainable":true}},{"name":"uchar","tagname":"method","owner":"jspyder.dtype","id":"method-uchar","meta":{"chainable":true}}],"alternateClassNames":[],"aliases":{},"id":"class-jspyder.dtype","short_doc":"Attaches strong-typed fields to javascript objects, which cannot be\nmutated from their initial data types (and can op...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/js-dtype.html#jspyder-dtype' target='_blank'>js-dtype.js</a></div></pre><div class='doc-contents'><hr />\n\n<p>Attaches strong-typed fields to javascript objects, which cannot be\nmutated from their initial data types (and can optionally be set\nas constant values, or throw errors when invalid data types are\napplied).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The object against which all of the other operations will be run\n     against.</p>\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>A callback function, which will be executed using the current\n     <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a> object as the context, and the object [obj] as its\n     first parameter.</p>\n\n<hr />\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-_typeError' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-_typeError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-_typeError' class='name expandable'>_typeError</a>( <span class='pre'>name, val, eType</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Returns a TypeError based on a template. ...</div><div class='long'><hr />\n\n<p>Returns a TypeError based on a template. Private function standardizes\nerror message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name assigned to the variable upon creation.</p>\n</div></li><li><span class='pre'>val</span> : Mixed<div class='sub-desc'><p>The value being assigned to the variable.</p>\n</div></li><li><span class='pre'>eType</span> : String<div class='sub-desc'><p>The expected data type.</p>\n\n<hr />\n</div></li></ul></div></div></div><div id='method-js_dtype[\"string\"]' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-js_dtype[\"string\"]' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-js_dtype[\"string\"]' class='name expandable'>js_dtype[\"string\"]</a>( <span class='pre'>name, value, strict, constant</span> ) : <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>attaches a strong-typed string to the object ...</div><div class='long'><p>attaches a strong-typed string to the object</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>strict</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>constant</span> : Object<div class='sub-desc'></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-jsstring' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-jsstring' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-jsstring' class='name expandable'>jsstring</a>( <span class='pre'>name, value, strict, constant</span> ) : <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Creates a jspyder-string object, which can (itself) be passed as a reference ...</div><div class='long'><p>Creates a jspyder-string object, which can (itself) be passed as a reference</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>strict</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>constant</span> : Object<div class='sub-desc'></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-ubyte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-ubyte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-ubyte' class='name expandable'>ubyte</a>( <span class='pre'>name, [value], [strict], [constant]</span> ) : <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Attaches an unsigned byte (0x00-0xFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\". ...</div><div class='long'><hr />\n\n<p>Attaches an unsigned byte (0x00-0xFF) to object \"o\", with member name\n\"name\", with an initial value of \"value\".  Optionally, the value can\nbe set to a constant (locked value) or a strict (checks type upon\nassignment).</p>\n\n<p>If a variable is assigned as a \"Constant\", then it becomes read-only,\nand trying to write to the variable throws an error.  If a variable is\nassigned as a \"Strict\", then it will throw an error if an invalid data\ntype is assigned; rather than attempt to \"guess\" the appropriate action\nbased on JavaScript's assignment heirarchy.</p>\n\n<p>The value of a \"Strict\" type can be illustrated with the following\nexample:</p>\n\n<pre><code> var o = {};\n js.dtype(o)\n     .ubyte(\"lazy\", 5)\n     .ubyte(\"strict\", 5, true);\n\n o.lazy += \"5\" // = 5 + \"5\" = \"55\"\n o.strict += \"5\" // TypeError\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name to identify the data-type with on object [o].</p>\n</div></li><li><span class='pre'>value</span> : Number (optional)<div class='sub-desc'><p>An initial assignment operation.  If this is a constant, then\n     this is how the first assignment will be made.  If this is strict,\n     then an invalid value will immediately throw a TypeError.</p>\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>strict</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object for on-assignment type-checking.  If\n     true, then any assignment operations will trigger a type-check,\n     and invalid types will throw a TypeError.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>constant</span> : Boolean (optional)<div class='sub-desc'><p>Whether to mark this object as a constant.  If identified as a\n     constant, then the value cannot be changed from the value assigned\n     by parameter [value].</p>\n\n<hr />\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-uchar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jspyder.dtype'>jspyder.dtype</span><br/><a href='source/js-dtype.html#jspyder-dtype-method-uchar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jspyder.dtype-method-uchar' class='name expandable'>uchar</a>( <span class='pre'>name, value, strict, constant</span> ) : <a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Attaches a strong-typed unsigned char type to the document. ...</div><div class='long'><p>Attaches a strong-typed unsigned char type to the document.  Of note,\nthis data type can take both numerical data (ushort) or character\ndata (single characters).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>strict</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>constant</span> : Object<div class='sub-desc'></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jspyder.dtype\" rel=\"jspyder.dtype\" class=\"docClass\">jspyder.dtype</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});